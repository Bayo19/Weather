{"version":3,"sources":["components/Title.jsx","components/Form.jsx","components/weather.jsx","App.js","serviceWorker.js","index.js"],"names":["Titles","className","Component","Form","onSubmit","this","props","getWeather","type","name","placeholder","Weather","city","country","temperature","windSpeed","description","error","API_KEY","App","state","undefined","e","a","async","preventDefault","target","elements","value","fetch","api_call","json","data","setState","main","temp","sys","wind","speed","weather","Title","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4RAaeA,E,iLATP,OACI,6BACI,wBAAIC,UAAU,cAAd,uBACA,4E,GALKC,aCcNC,G,sLAVP,OACI,0BAAMF,UAAU,OAAOG,SAAUC,KAAKC,MAAMC,YACxC,2BAAON,UAAU,cAAcO,KAAK,OAAOC,KAAK,OAAOC,YAAY,SACnE,2BAAOT,UAAU,eAAcO,KAAK,OAAOC,KAAK,UAAUC,YAAY,YACtE,4BAAQT,UAAU,OAAlB,oB,GAPGC,cCaJS,E,iLAZP,OACI,6BACCN,KAAKC,MAAMM,MAAQP,KAAKC,MAAMO,SAAW,uBAAGZ,UAAU,SAAb,aAAgCI,KAAKC,MAAMM,KAA3C,IAAkDP,KAAKC,MAAMO,SACtGR,KAAKC,MAAMQ,aAAe,uBAAGb,UAAU,SAAb,gBAAmCI,KAAKC,MAAMQ,aACxET,KAAKC,MAAMS,WAAa,uBAAGd,UAAU,SAAb,eAAkCI,KAAKC,MAAMS,WACrEV,KAAKC,MAAMU,aAAe,uBAAGf,UAAU,SAAb,eAAkCI,KAAKC,MAAMU,aACvEX,KAAKC,MAAMW,OAAS,uBAAGhB,UAAU,SAASI,KAAKC,MAAMW,Y,GAR5Cf,aCMhBgB,EAAU,mCAgEDC,E,2MA7DbC,MAAQ,CACNN,iBAAaO,EACbT,UAAMS,EACNR,aAASQ,EACTN,eAAWM,EACXL,iBAAaK,EACbJ,WAAOI,G,EAITd,WAAc,SAAMe,GAAN,qBAAAC,EAAAC,OAAA,uDACZF,EAAEG,iBACIb,EAAMU,EAAEI,OAAOC,SAASf,KAAKgB,MAC7Bf,EAASS,EAAEI,OAAOC,SAASd,QAAQe,MAH7B,WAAAL,EAAA,MAKWM,MAAM,oDAAD,OAAqDjB,EAArD,YAA6DC,EAA7D,kBAA8EK,EAA9E,mBALhB,cAKNY,EALM,kBAAAP,EAAA,MAOOO,EAASC,QAPhB,OAONC,EAPM,OAQTpB,GAAQC,EACX,EAAKoB,SAAS,CACZnB,YAAakB,EAAKE,KAAKC,KACvBvB,KAAMoB,EAAKvB,KACXI,QAASmB,EAAKI,IAAIvB,QAClBE,UAAWiB,EAAKK,KAAKC,MACrBtB,YAAagB,EAAKO,QAAQ,GAAGvB,YAC7BC,MAAO,KAIP,EAAKgB,SAAS,CACZnB,iBAAaO,EACbT,UAAMS,EACNR,aAASQ,EACTN,eAAWM,EACXL,iBAAaK,EACbJ,MAAO,4BAzBC,uC,wEAkCZ,OACE,yBAAKhB,UAAU,OACb,kBAACuC,EAAD,MACA,kBAAC,EAAD,CAAMjC,WAAYF,KAAKE,aACvB,kBAAC,EAAD,CAASO,YAAaT,KAAKe,MAAMN,YAClCF,KAAMP,KAAKe,MAAMR,KACjBC,QAASR,KAAKe,MAAMP,QACpBE,UAAWV,KAAKe,MAAML,UACtBC,YAAaX,KAAKe,MAAMJ,YACxBC,MAAOZ,KAAKe,MAAMH,a,GAtDPf,aCEEuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAQ,kBAAE,EAAF,MAAYC,SAASC,eAAe,SD4H/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.9e170973.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass Titles extends Component {\r\n    render(){\r\n        return (\r\n            <div>\r\n                <h1 className=\"titletitle\">What's the Weather?</h1>\r\n                <p>Find out temperature conditions and more</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Titles;","import React, {Component} from 'react'\r\nimport '../App.css';\r\n\r\nclass Form extends Component {\r\n    render() {\r\n\r\n        return (\r\n            <form className=\"form\" onSubmit={this.props.getWeather}>\r\n                <input className=\"first-input\" type=\"text\" name=\"city\" placeholder=\"city\"/>\r\n                <input className=\"second-input\"type=\"text\" name=\"country\" placeholder=\"country\"/>\r\n                <button className=\"btn\">Get weather</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form;","import React, { Component } from 'react';\r\n\r\nclass Weather extends Component {\r\n    render () {\r\n        return (\r\n            <div>\r\n            {this.props.city && this.props.country && <p className=\"stein\">Location: {this.props.city} {this.props.country}</p>}\r\n            {this.props.temperature && <p className=\"stein\">Temperature: {this.props.temperature}</p>}\r\n            {this.props.windSpeed && <p className=\"stein\">Wind Speed: {this.props.windSpeed}</p>}\r\n            {this.props.description && <p className=\"stein\">Conditions: {this.props.description}</p>}\r\n            {this.props.error && <p className=\"stein\">{this.props.error}</p>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Weather;","import React, { Component } from 'react';\nimport Titles from './components/Title';\nimport Form from './components/Form'\nimport Weather from './components/weather';\nimport './App.css';\n\n\n\nconst API_KEY = \"24497ee56c02cebbd96e7b3a38b7f140\"\n\nclass App extends Component {\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    windSpeed: undefined,\n    description: undefined,\n    error: undefined\n\n  }\n\n  getWeather =  async(e) => {\n    e.preventDefault();\n    const city =e.target.elements.city.value;\n    const country =e.target.elements.country.value;\n\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\n\n    const data = await api_call.json();\n    if(city && country) {\n    this.setState({\n      temperature: data.main.temp,\n      city: data.name,\n      country: data.sys.country,\n      windSpeed: data.wind.speed,\n      description: data.weather[0].description,\n      error: '',\n\n    });\n    } else {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        windSpeed: undefined,\n        description: undefined,\n        error: 'Please enter the values',\n  \n      });\n    }\n  }\n\n\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Titles />\n        <Form getWeather={this.getWeather}/>\n        <Weather temperature={this.state.temperature}\n       city={this.state.city}\n       country={this.state.country} \n       windSpeed={this.state.windSpeed}\n       description={this.state.description}\n       error={this.state.error}\n       />\n      </div>\n    )\n  }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( < App / > , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}